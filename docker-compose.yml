services:
  poll:
    build: ./poll
    ports:
      - "5000:80"
    environment:
      - REDIS_HOST=redis
    networks:
      - poll-tier
    depends_on:
      - redis
    restart: unless-stopped

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - poll-tier
      - back-tier
    restart: unless-stopped

  worker:
    build: ./worker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - back-tier
    restart: unless-stopped

  db:
    image: postgres:16
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - db-data:/var/lib/postgresql/data
    networks:
      - back-tier
      - result-tier
    restart: unless-stopped

  result:
    depends_on:
      db:
        condition: service_healthy
    build: ./result
    ports:
      - "5001:80"
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - result-tier
    restart: unless-stopped

networks:
  poll-tier:
  result-tier:
  back-tier:

volumes:
  db-data: